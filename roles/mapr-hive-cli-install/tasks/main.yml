---
# Install Hive CLI
- name: Install mapr-hive
  package: name=mapr-hive state=present

# Other actions
#- name: Find Hive Path
#  find: paths="/opt/mapr/hive/" patterns="hive*" file_type=directory
#  register: hive_path_result
#  failed_when: hive_path_result.matched != 1
- name: Get Hive version
  shell: cat /opt/mapr/hive/hiveversion
  register: version_output
  check_mode: no
  changed_when: no
- name: Copy MySQL driver
  copy: src=mysql-connector-java-5.1.40-bin.jar dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/lib/
  when: client_install is not defined and hive_db_type == 'mysql'
- name: Copy Oracle driver
  copy: src={{ oracle_jdbc_driver_path }} dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/lib/
  when: client_install is not defined and hive_db_type == 'oracle'
- name: Configure.sh -R (force first generation, to avoid that file will be overridden later)
  shell: /opt/mapr/server/configure.sh -R
  when: client_install is not defined
- name: Configure hive-site.xml - unsecure
  template: src=hive-site.unsecure.xml dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/conf/hive-site.xml
  when: hive_server_security == 'none'
- name: Configure hive-site.xml - maprsasl
  template: src=hive-site.maprsasl.xml dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/conf/hive-site.xml
  when: hive_server_security == 'maprsasl'
#- name: Set MAPR_HIVE_SERVER_LOGIN_OPTS in env.sh to maprsasl
#  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_SERVER_LOGIN_OPTS" regexp="^MAPR_HIVE_SERVER_LOGIN_OPTS" line="MAPR_HIVE_SERVER_LOGIN_OPTS=\"-Dhadoop.login=maprsasl\""
#  when: mapr_security == 'maprsasl'
#- name: Set MAPR_HIVE_LOGIN_OPTS= in env.sh to maprsasl
#  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_LOGIN_OPTS=" regexp="^MAPR_HIVE_LOGIN_OPTS=" line="MAPR_HIVE_LOGIN_OPTS=\"-Dhadoop.login=maprsasl\""
#  when: mapr_security == 'maprsasl'

- name: Configure hive-site.xml - pam
  template: src=hive-site.pam.xml dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/conf/hive-site.xml
  when: hive_server_security == 'pam'
- name: Configure hive-site.xml - kerberos
  template: src=hive-site.kerberos.xml dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/conf/hive-site.xml
  when: hive_server_security == 'kerberos'
- name: Set MAPR_HIVE_SERVER_LOGIN_OPTS in env.sh to hybrid for Kerberos
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_SERVER_LOGIN_OPTS" regexp="^MAPR_HIVE_SERVER_LOGIN_OPTS" line="MAPR_HIVE_SERVER_LOGIN_OPTS=\"-Dhadoop.login=hybrid\""
  when: mapr_security == 'kerberos'
- name: Set MAPR_HIVE_LOGIN_OPTS= in env.sh to hybrid for Kerberos
  lineinfile: dest=/opt/mapr/conf/env.sh insertbefore="^export\ MAPR_HIVE_LOGIN_OPTS=" regexp="^MAPR_HIVE_LOGIN_OPTS=" line="MAPR_HIVE_LOGIN_OPTS=\"-Dhadoop.login=hybrid\""
  when: mapr_security == 'kerberos'

- name: Setup Tez for Hive
  block:
    - name: Install mapr-tez
      package: name=mapr-tez state=present
    - name: Create maprfs:///apps
      shell: hadoop fs -mkdir -p /apps
      when: inventory_hostname == groups["mapr-hive-cli"][0]
      environment:
        MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
    - name: Create maprfs:///apps/tez
      shell: hadoop fs -mkdir -p /apps/tez
      when: inventory_hostname == groups["mapr-hive-cli"][0]
      environment:
        MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
    - name: Find Tez Path
      find: paths="/opt/mapr/tez/" patterns="tez*" file_type=directory
      register: tez_path_result
    - name: Upload libraries to maprfs:///apps/tez
      shell: hadoop fs -put -f {{ tez_path_result.files[0].path }} /apps/tez
      when: inventory_hostname == groups["mapr-hive-cli"][0]
      environment:
        MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
    - name: Chmod 755 maprfs:///apps/tez
      shell: hadoop fs -chmod -R 755 /apps/tez
      when: inventory_hostname == groups["mapr-hive-cli"][0]
      environment:
        MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: hive_with_tez
- name: Uninstall mapr-tez
  package: name=mapr-tez state=absent
  when: not hive_with_tez

- name: Configure hive-env.sh
  template: src=hive-env.sh dest=/opt/mapr/hive/hive-{{ version_output.stdout }}/conf/hive-env.sh
- name: Add HIVE_HOME to /etc/profile
  lineinfile: dest=/etc/profile state=present line="export HIVE_HOME=/opt/mapr/hive/hive-{{ version_output.stdout }}"
- name: Set owner mapr-system user
  file: path=/opt/mapr/hive owner={{ mapr_user }} group={{ mapr_group }} state=directory recurse=yes
- name: Create MySQL tables for hive
  shell: "/opt/mapr/hive/hive-{{ version_output.stdout }}/bin/schematool -dbType mysql -initSchema"
  when: client_install is not defined and inventory_hostname == groups["mapr-hive-cli"][0] and hive_db_type == 'mysql'
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  ignore_errors: True # TODO error result should be handeled
- name: Create Oracle tables for hive
  shell: "/opt/mapr/hive/hive-{{ version_output.stdout }}/bin/schematool -dbType oracle -initSchema"
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
  when: client_install is not defined and inventory_hostname == groups["mapr-hive-cli"][0] and hive_db_type == 'oracle'
  ignore_errors: True # TODO error result should be handeled

- name: Add MAPR_HIVE_LOGIN_OPTS to /opt/mapr/conf/env.sh
  lineinfile: dest=/opt/mapr/conf/env.sh state=present regexp="^MAPR_HIVE_LOGIN_OPTS=" line='MAPR_HIVE_LOGIN_OPTS="-Dhadoop.login=maprsasl"'
  when: hive_metastore_security == "maprsasl"
- name: Add MAPR_HIVE_SERVER_LOGIN_OPTS to /opt/mapr/conf/env.sh
  lineinfile: dest=/opt/mapr/conf/env.sh state=present regexp="^MAPR_HIVE_SERVER_LOGIN_OPTS=" line='MAPR_HIVE_SERVER_LOGIN_OPTS="-Dhadoop.login=maprsasl_keytab"'
  when: hive_metastore_security == "maprsasl"

# required for Hue
- name: Create maprfs:///user/hive/warehouse
  shell: hadoop fs -mkdir -p /user/hive/warehouse
  when: client_install is not defined and inventory_hostname == groups["mapr-hive-cli"][0]
  environment:
    MAPR_TICKETFILE_LOCATION: /opt/mapr/conf/mapruserticket
